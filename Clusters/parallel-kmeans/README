Parallel K-Means Data Clustering

The software package of parallel K-means data clustering contains the 
followings:

  * A parallel implementation using OpenMP and C
  * A parallel implementation using MPI and C
  * A sequential version in C

To compile:
  Although I used Intel C compiler, icc, version 7.1 during the code 
  development, there is no particular features required except for OpenMP. 
  Thus, the implementation should be fairly portable. Please modify 
  Makefile to change the compiler if needed.
  To enable PnetCDF feature, edit Makefile and define/undefine variable
  ENABLE_PNETCDF to yes/no and set the variable PNETCDF_DIR to the place
  where parallel netCDF is installed.

To run:
  * The Makefile will produce executables
     o "omp_main" for OpenMP version
     o "mpi_main" for MPI version
     o "seq_main" for sequential version

  * The list of available command-line arguments can be obtained by
    running -h option
     o For example, running command "omp_main -h" will produce:
       Usage: main [switches] -i filename -n num_clusters
             -i filename    : file containing data to be clustered
             -c centers     : file containing initial centers. default: filename
             -b             : input file is in binary format (default no)
             -n num_clusters: number of clusters (K must > 1)
             -t threshold   : threshold value (default 0.0010)
             -p nproc       : number of threads (default system allocated)
             -a             : perform atomic OpenMP pragma (default no)
             -o             : output timing results (default no)
             -d             : enable debug mode

     o For OpenMP version,
       Usage: omp_main [switches] -i filename -n num_clusters
             -i filename    : file containing data to be clustered
             -c centers     : file containing initial centers. default: filename
             -b             : input file is in binary format (default no)
             -n num_clusters: number of clusters (K must > 1)
             -t threshold   : threshold value (default 0.0010)
             -p nproc       : number of threads (default system allocated)
             -a             : perform atomic OpenMP pragma (default no)
             -o             : output timing results (default no)
             -v var_name    : using PnetCDF for file input and output and var_name
                            : is variable name in the netCDF file to be clustered
             -d             : enable debug mode

     o For MPI version,
       Usage: main [switches] -i filename -n num_clusters
             -i filename    : file containing data to be clustered
             -c centers     : file containing initial centers. default: filename
             -b             : input file is in binary format (default no)
             -r             : output file in binary format (default no)
             -n num_clusters: number of clusters (K must > 1)
             -t threshold   : threshold value (default %.4f)\n"
             -o             : output timing results (default no)
             -c var_name    : using PnetCDF for file input and output, var_name
                            : is variable name in the netCDF file to be clustered
             -d             : enable debug mode

  * Example run commands:
      # sequential K-means ----------------------------------------------------
      seq_main -o -b -n 4 -i Image_data/color17695.bin
      seq_main -o -b -n 4 -i Image_data/edge17695.bin
      seq_main -o -b -n 4 -i Image_data/texture17695.bin

      seq_main -o    -n 4 -i Image_data/color100.txt
      seq_main -o    -n 4 -i Image_data/edge100.txt
      seq_main -o    -n 4 -i Image_data/texture100.txt

      # OpenMP K-means using pragma atomic ------------------------------------
      omp_main -a -o -b -n 4 -i Image_data/color17695.bin
      omp_main -a -o -b -n 4 -i Image_data/edge17695.bin
      omp_main -a -o -b -n 4 -i Image_data/texture17695.bin

      omp_main -a -o    -n 4 -i Image_data/color100.txt
      omp_main -a -o    -n 4 -i Image_data/edge100.txt
      omp_main -a -o    -n 4 -i Image_data/texture100.txt

      # MPI K-means -----------------------------------------------------------
      mpiexec -n 4 mpi_main -o -b -n 4 -i Image_data/color17695.bin
      mpiexec -n 4 mpi_main -o -b -n 4 -i Image_data/edge17695.bin
      mpiexec -n 4 mpi_main -o -b -n 4 -i Image_data/texture17695.bin

      mpiexec -n 4 mpi_main -o    -n 4 -i Image_data/color100.txt
      mpiexec -n 4 mpi_main -o    -n 4 -i Image_data/edge100.txt
      mpiexec -n 4 mpi_main -o    -n 4 -i Image_data/texture100.txt

      # MPI K-means using PnetCDF ---------------------------------------------
      mpiexec -n 4 mpi_main -o -n 4 -i Image_data/color17695.nc   -c color17695
      mpiexec -n 4 mpi_main -o -n 4 -i Image_data/edge17695.nc    -c edge17695
      mpiexec -n 4 mpi_main -o -n 4 -i Image_data/texture17695.nc -c texture17695

      # MPI+OpenMP using PnetCDF ----------------------------------------------
      mpiexec -n 1 omp_main -a -o -n 4 -i Image_data/color17695.nc   -c color17695
      mpiexec -n 1 omp_main -a -o -n 4 -i Image_data/edge17695.nc    -c edge17695
      mpiexec -n 1 omp_main -a -o -n 4 -i Image_data/texture17695.nc -c texture17695

Input file format:
The executables read an input file that stores the data points to be 
clustered. A few example files are provided in the sub-directory 
./Image_data. The input files can be in three formats: ASCII text, raw 
binary, and netCDF.

  * ASCII text format:
    o Each line contains the ID and coordinates of a single data point
    o The number of coordinates must be equal for all data points
  * Raw binary format:
    o There is a file header of 2 integers:
      *  The first 4-byte integer must be the number of data points.
      *  The second integer must be the number of coordinates.
    o The rest of the file contains the coordinates of all data 
      points and each coordinate is of type 4-byte float.
  * netCDF file format:
    o netCDF is a portable and self-describing file format
    o Parallel netCDF (PnetCDF) is used to carry out paralell I/O, please
      check the link below for further information about PnetCDF.
      http://cucis.ece.northwestern.edu/projects/PnetCDF

Output files: There are two output files:
  * Coordinates of cluster centers
    o The file name is the input file name appended with ".cluster_centres".
    o File extensions will be added, eg. ".txt" for ASCII format, ".bin" for
      binary and ".nc" for netCDF.
    o For ASCII, each line contains an integer indicating the cluster id and
      the coordinates of the cluster center.
  * Membership of all data points to the clusters
    o The file name is the input file name appended with ".membership".
    o File extensions will be added, eg. ".txt" for ASCII format, ".bin" for
      binary and ".nc" for netCDF.
    o For ASCII, each line contains two integers: data point index (from 0 to 
      the number of points) and the cluster id indicating the membership of
      the point.
  * File sample.output shows the standard output from example runs in
    OpenMP, sequential, and MPI.

Limitations:
    * Data type -- This implementation uses C float data type for all
      coordinates and other real numbers.
    * Large number of data points -- The number of data points cannot
      exceed 2G due to the 4-byte integers used in the programs. (But do
      let me know if it is desired.)

Other utilities:
    * bin2nc.c -- a tool that can be used to convert a file in binary format
      to netCDF format in parallel.

Wei-keng Liao (wkliao@eecs.northwestern.edu)
EECS Department
Northwestern University

Oct. 31, 2013

